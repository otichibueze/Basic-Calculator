type: edu
files:
- name: src/main/java/org/hyperskill/calculator/MainActivity.kt
  visible: true
  text: |-
    package org.hyperskill.calculator

    import android.os.Bundle
    import androidx.appcompat.app.AppCompatActivity

    class MainActivity : AppCompatActivity() {
        override fun onCreate(savedInstanceState: Bundle?) {
            super.onCreate(savedInstanceState)
            setContentView(R.layout.activity_main)
        }
    }
  learner_created: false
- name: src/main/res/drawable/ic_launcher_background.xml
  visible: true
  text: |
    <?xml version="1.0" encoding="utf-8"?>
    <vector xmlns:android="http://schemas.android.com/apk/res/android"
        android:width="108dp"
        android:height="108dp"
        android:viewportWidth="108"
        android:viewportHeight="108">
        <path
            android:fillColor="#008577"
            android:pathData="M0,0h108v108h-108z" />
        <path
            android:fillColor="#00000000"
            android:pathData="M9,0L9,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,0L19,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M29,0L29,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M39,0L39,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M49,0L49,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M59,0L59,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M69,0L69,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M79,0L79,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M89,0L89,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M99,0L99,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,9L108,9"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,19L108,19"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,29L108,29"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,39L108,39"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,49L108,49"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,59L108,59"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,69L108,69"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,79L108,79"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,89L108,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,99L108,99"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,29L89,29"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,39L89,39"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,49L89,49"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,59L89,59"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,69L89,69"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,79L89,79"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M29,19L29,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M39,19L39,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M49,19L49,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M59,19L59,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M69,19L69,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M79,19L79,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
    </vector>
  learner_created: false
- name: src/main/res/drawable-v24/ic_launcher_foreground.xml
  visible: true
  text: |
    <vector xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:aapt="http://schemas.android.com/aapt"
        android:width="108dp"
        android:height="108dp"
        android:viewportWidth="108"
        android:viewportHeight="108">
        <path
            android:fillType="evenOdd"
            android:pathData="M32,64C32,64 38.39,52.99 44.13,50.95C51.37,48.37 70.14,49.57 70.14,49.57L108.26,87.69L108,109.01L75.97,107.97L32,64Z"
            android:strokeWidth="1"
            android:strokeColor="#00000000">
            <aapt:attr name="android:fillColor">
                <gradient
                    android:endX="78.5885"
                    android:endY="90.9159"
                    android:startX="48.7653"
                    android:startY="61.0927"
                    android:type="linear">
                    <item
                        android:color="#44000000"
                        android:offset="0.0" />
                    <item
                        android:color="#00000000"
                        android:offset="1.0" />
                </gradient>
            </aapt:attr>
        </path>
        <path
            android:fillColor="#FFFFFF"
            android:fillType="nonZero"
            android:pathData="M66.94,46.02L66.94,46.02C72.44,50.07 76,56.61 76,64L32,64C32,56.61 35.56,50.11 40.98,46.06L36.18,41.19C35.45,40.45 35.45,39.3 36.18,38.56C36.91,37.81 38.05,37.81 38.78,38.56L44.25,44.05C47.18,42.57 50.48,41.71 54,41.71C57.48,41.71 60.78,42.57 63.68,44.05L69.11,38.56C69.84,37.81 70.98,37.81 71.71,38.56C72.44,39.3 72.44,40.45 71.71,41.19L66.94,46.02ZM62.94,56.92C64.08,56.92 65,56.01 65,54.88C65,53.76 64.08,52.85 62.94,52.85C61.8,52.85 60.88,53.76 60.88,54.88C60.88,56.01 61.8,56.92 62.94,56.92ZM45.06,56.92C46.2,56.92 47.13,56.01 47.13,54.88C47.13,53.76 46.2,52.85 45.06,52.85C43.92,52.85 43,53.76 43,54.88C43,56.01 43.92,56.92 45.06,56.92Z"
            android:strokeWidth="1"
            android:strokeColor="#00000000" />
    </vector>
  learner_created: false
- name: src/main/res/layout/activity_main.xml
  visible: true
  text: |-
    <?xml version="1.0" encoding="utf-8"?>
    <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:app="http://schemas.android.com/apk/res-auto"
        android:layout_width="match_parent"
        android:layout_height="match_parent">

    </androidx.constraintlayout.widget.ConstraintLayout>
  learner_created: false
- name: src/main/res/mipmap-anydpi-v26/ic_launcher.xml
  visible: true
  text: |-
    <?xml version="1.0" encoding="utf-8"?>
    <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
        <background android:drawable="@drawable/ic_launcher_background" />
        <foreground android:drawable="@drawable/ic_launcher_foreground" />
    </adaptive-icon>
  learner_created: false
- name: src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
  visible: true
  text: |-
    <?xml version="1.0" encoding="utf-8"?>
    <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
        <background android:drawable="@drawable/ic_launcher_background" />
        <foreground android:drawable="@drawable/ic_launcher_foreground" />
    </adaptive-icon>
  learner_created: false
- name: src/main/res/values/colors.xml
  visible: true
  text: |
    <?xml version="1.0" encoding="utf-8"?>
    <resources>
        <color name="colorPrimary">#008577</color>
        <color name="colorPrimaryDark">#00574B</color>
        <color name="colorAccent">#D81B60</color>
    </resources>
  learner_created: false
- name: src/main/res/values/strings.xml
  visible: true
  text: |-
    <resources>
        <string name="app_name">Basic Calculator</string>
    </resources>
  learner_created: false
- name: src/main/res/values/styles.xml
  visible: true
  text: |
    <resources>

        <!-- Base application theme. -->
        <style name="AppTheme" parent="Theme.MaterialComponents.Light.DarkActionBar">
            <!-- Customize your theme here. -->
            <item name="colorPrimary">@color/colorPrimary</item>
            <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
            <item name="colorAccent">@color/colorAccent</item>
        </style>

    </resources>
  learner_created: false
- name: src/main/AndroidManifest.xml
  visible: true
  text: |-
    <?xml version="1.0" encoding="utf-8"?>
    <manifest xmlns:android="http://schemas.android.com/apk/res/android"
        package="org.hyperskill.calculator">

      <application
          android:allowBackup="true"
          android:icon="@mipmap/ic_launcher"
          android:label="@string/app_name"
          android:roundIcon="@mipmap/ic_launcher_round"
          android:supportsRtl="true"
          android:theme="@style/AppTheme">
        <activity android:name="org.hyperskill.calculator.MainActivity">
          <intent-filter>
            <action android:name="android.intent.action.MAIN" />

            <category android:name="android.intent.category.LAUNCHER" />
          </intent-filter>
        </activity>
      </application>

    </manifest>
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    apply plugin: 'com.android.application'
    apply plugin: 'kotlin-android'

    android {
        compileSdkVersion hs.android.compileSdkVersion

        defaultConfig {

            applicationId "org.hyperskill.calculator"
            minSdkVersion hs.android.minSdkVersion
            targetSdkVersion hs.android.targetSdkVersion
            versionCode 1
            versionName '1.0'
        }

        buildFeatures {
            viewBinding true
        }
    }

    dependencies {
        def kotlinVersion = hs.android.kotlinVersion
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

        def coreKtx = hs.android.lib.coreKtx
        implementation "androidx.core:core-ktx:$coreKtx"

        def appCompat = hs.android.lib.appCompat
        implementation "androidx.appcompat:appcompat:$appCompat"

        def constraintLayout = hs.android.lib.constraintLayout
        implementation "androidx.constraintlayout:constraintlayout:$constraintLayout"

        def material = hs.android.lib.material
        implementation "com.google.android.material:material:$material"
    }
  learner_created: false
- name: src/test/java/org/hyperskill/calculator/internals/AbstractUnitTest.kt
  visible: false
  text: |-
    package org.hyperskill.calculator.internals

    import android.app.Activity
    import android.app.AlertDialog
    import android.content.Intent
    import android.os.Bundle
    import android.view.View
    import org.junit.Assert.*
    import org.robolectric.Robolectric
    import org.robolectric.Shadows.shadowOf
    import org.robolectric.android.controller.ActivityController
    import org.robolectric.shadow.api.Shadow
    import org.robolectric.shadows.ShadowActivity
    import org.robolectric.shadows.ShadowAlertDialog
    import org.robolectric.shadows.ShadowLooper
    import org.robolectric.shadows.ShadowToast
    import java.time.Duration

    abstract class AbstractUnitTest<T : Activity>(clazz: Class<T>) {

        /**
         * Setup and control activities and their lifecycle
         */
        val activityController: ActivityController<T> by lazy {
            Robolectric.buildActivity(clazz)
        }

        /**
         * The activity being tested.
         *
         * It is the @RealObject of the shadowActivity
         */
        val activity : Activity by lazy {
            activityController.get()
        }

        /**
         * A Roboletric shadow object of the Activity class, contains helper methods to deal with
         * testing activities like setting permissions, peeking results of launched activities for result,
         * retrieving shown dialogs, intents and others.
         *
         * If you don't know what shadows are you can have a better understanding on that reading this
         * on roboletric documentation: http://robolectric.org/extending/
         *
         * Understanding Shadows is fundamental for Roboletric, things are not what they appear to be on
         * Roboletric because running a code on the jvm is not the same as running the code on a real/emulated device.
         * Code that expects to eventually talk to the machine won't have the machine they expect to have to talk to.
         * Shadow is how Roboletric makes things possible, they impersonate @RealObject and act when @RealObject is expected to act.
         *
         * Things in Roboletric are not what they appear to be.
         * It is possible to not notice it for the most part, but it will be essential for some other parts
         */
        val shadowActivity: ShadowActivity by lazy {
            Shadow.extract(activity)
        }

        /**
         * A Roboletric shadow object of the mainLooper. Handles enqueued runnables and also the passage of time.
         *
         * Usually used with .idleFor(someDurationValue) or .runToEndOfTasks()
         */
        val shadowLooper: ShadowLooper by lazy {
            shadowOf(activity.mainLooper)
        }

        /**
         * Decorate your test code with this method to ensure better error messages displayed
         * when tests are run with check button and exceptions are thrown by user implementation.
         *
         * returns a value for convenience use, like in tests that involve navigation between Activities
         */
        fun <ReturnValue> testActivity(arguments: Intent = Intent(), savedInstanceState: Bundle = Bundle(), testCodeBlock: (Activity) -> ReturnValue): ReturnValue {
            try {
                activity.intent =  arguments
                activityController.setup(savedInstanceState)
            } catch (ex: Exception) {
                throw AssertionError("Exception, test failed on activity creation with $ex\n${ex.stackTraceToString()}")
            }

            return try {
                testCodeBlock(activity)
            } catch (ex: Exception) {
                throw AssertionError("Exception. Test failed on activity execution with $ex\n${ex.stackTraceToString()}")
            }
        }



        /**
         * Use this method to perform clicks. It will also advance the clock millis milliseconds and run
         * enqueued Runnable scheduled to run on main looper in that timeframe.
         * Default value for millis is 500
         *
         * Internally it calls performClick() and shadowLooper.idleFor(millis)
         */
        fun View.clickAndRun(millis: Long = 500){
            this.performClick()
            shadowLooper.idleFor(Duration.ofMillis(millis))
        }




        /**
         * Asserts that the last message toasted is the expectedMessage.
         * Assertion fails if no toast is shown with null actualLastMessage value.
         */
        fun assertLastToastMessageEquals(errorMessage: String, expectedMessage: String,) {
            val actualLastMessage: String? = ShadowToast.getTextOfLatestToast()
            assertEquals(errorMessage, expectedMessage, actualLastMessage)
        }

        /**
         * Use this method to retrieve the latest AlertDialog.
         *
         * The existence of such AlertDialog will be asserted before returning.
         *
         * Robolectric only supports android.app.AlertDialog, test will not be
         * able to find androidx.appcompat.app.AlertDialog.
         *
         * - Important!!! :
         * When writing stage description state explicitly the correct version that should be imported
         */
        fun getLatestDialog(): AlertDialog {
            val latestAlertDialog = ShadowAlertDialog.getLatestAlertDialog()

            assertNotNull(
                "There was no AlertDialog found. Make sure to import android.app.AlertDialog version",
                latestAlertDialog
            )

            return latestAlertDialog!!
        }

        /**
         * Use this method to find views.
         *
         * The view existence will be assert before being returned
         */
        inline fun <reified T> Activity.findViewByString(idString: String): T {
            val id = this.resources.getIdentifier(idString, "id", this.packageName)
            val view: View? = this.findViewById(id)

            val idNotFoundMessage = "View with id \"$idString\" was not found"
            val wrongClassMessage = "View with id \"$idString\" is not from expected class. " +
                    "Expected ${T::class.java.simpleName} found ${view?.javaClass?.simpleName}"

            assertNotNull(idNotFoundMessage, view)
            assertTrue(wrongClassMessage, view is T)

            return view as T
        }

        /**
         * Use this method to find views.
         *
         * The view existence will be assert before being returned
         */
        inline fun <reified T> View.findViewByString(idString: String): T {
            val id = this.resources.getIdentifier(idString, "id", context.packageName)
            val view: View? = this.findViewById(id)

            val idNotFoundMessage = "View with id \"$idString\" was not found"
            val wrongClassMessage = "View with id \"$idString\" is not from expected class. " +
                    "Expected ${T::class.java.simpleName} found ${view?.javaClass?.simpleName}"

            assertNotNull(idNotFoundMessage, view)
            assertTrue(wrongClassMessage, view is T)

            return view as T
        }

    }
  learner_created: false
- name: src/test/java/org/hyperskill/calculator/internals/BasicCalculatorUnitTest.kt
  visible: false
  text: |-
    package org.hyperskill.calculator.internals

    import android.app.Activity

    open class BasicCalculatorUnitTest<T : Activity>(clazz: Class<T>): AbstractUnitTest<T>(clazz) {

        val calculatorView by lazy {
            CalculatorView(this)
        }

    }
  learner_created: false
- name: src/test/java/org/hyperskill/calculator/internals/CalculatorView.kt
  visible: false
  text: |-
    package org.hyperskill.calculator.internals

    import android.app.Activity
    import android.text.InputType
    import android.widget.Button
    import android.widget.EditText

    import org.junit.Assert.assertEquals

    class CalculatorView<T : Activity>(test: BasicCalculatorUnitTest<T>) {

        val displayEditText = with(test) {
            activity.findViewByString<EditText>("displayEditText").also { displayEditText ->
                displayEditText.assertInitialDisplayEditText()
            }
        }
        val button0 = with(test) {
            val idString = "button0"
            activity.findViewByString<Button>(idString).also {
                it.assertText(idString, "0")
            }
        }
        val button1 = with(test) {
            val idString = "button1"
            activity.findViewByString<Button>(idString).also {
                it.assertText(idString, "1")
            }
        }
        val button2 = with(test) {
            val idString = "button2"
            activity.findViewByString<Button>(idString).also {
                it.assertText(idString, "2")
            }
        }
        val button3 = with(test) {
            val idString = "button3"
            activity.findViewByString<Button>(idString).also {
                it.assertText(idString, "3")
            }
        }
        val button4 = with(test) {
            val idString = "button4"
            activity.findViewByString<Button>(idString).also {
                it.assertText(idString, "4")
            }
        }
        val button5 = with(test) {
            val idString = "button5"
            activity.findViewByString<Button>(idString).also {
                it.assertText(idString, "5")
            }
        }
        val button6 = with(test) {
            val idString = "button6"
            activity.findViewByString<Button>(idString).also {
                it.assertText(idString, "6")
            }
        }
        val button7 = with(test) {
            val idString = "button7"
            activity.findViewByString<Button>(idString).also {
                it.assertText(idString, "7")
            }
        }
        val button8 = with(test) {
            val idString = "button8"
            activity.findViewByString<Button>(idString).also {
                it.assertText(idString, "8")
            }
        }
        val button9 = with(test) {
            val idString = "button9"
            activity.findViewByString<Button>(idString).also {
                it.assertText(idString, "9")
            }
        }
        val dotButton = with(test) {
            activity.findViewByString<Button>("dotButton")
        }
        val equalButton = with(test) {
            activity.findViewByString<Button>("equalButton")
        }
        val clearButton = with(test) {
            activity.findViewByString<Button>("clearButton")
        }
        val addButton = with(test) {
            activity.findViewByString<Button>("addButton")
        }
        val subtractButton = with(test) {
            activity.findViewByString<Button>("subtractButton")
        }
        val multiplyButton = with(test) {
            activity.findViewByString<Button>("multiplyButton")
        }
        val divideButton = with(test) {
            activity.findViewByString<Button>("divideButton")
        }
        private val numberButtons = listOf(
            button0, button1, button2, button3, button4,
            button5, button6, button7, button8, button9
        )

        private fun EditText.assertInitialDisplayEditText() {

            // initial text should be empty string
            val messageTextError = "The EditText with id \"displayEditText\" should initially contain \"\" in the property text."
            val expectedText = ""
            val actualText = this.text.toString()
            assertEquals(messageTextError, expectedText, actualText)

            // initial hint should be 0
            val messageHintError = "Check whether EditText with id \"displayEditText\" has \"0\" set as a hint"
            val expectedHint = "0"
            val actualHint = this.hint.toString()
            assertEquals(messageHintError, expectedHint, actualHint)

            // inputType = InputType.Type_NULL
            val messageDisabledError =
                "The EditText with id \"displayEditText\" should have inputType = InputType.Type_NULL"
            val expectedInputType = InputType.TYPE_NULL
            val actualIsEnabled = this.inputType
            assertEquals(messageDisabledError, expectedInputType, actualIsEnabled)
        }

        fun forEachNumberButton(action: (button: Button, idString: String) -> Unit) {
            numberButtons.forEachIndexed { index, button ->
                val idString = "button$index"
                action(button, idString)
            }
        }

        private fun Button.assertText(idString: String, expectedText: String) {
            val messageTextError = "The Button with id \"$idString\" has wrong initial text"
            val actualText = this.text.toString()
            assertEquals(messageTextError, expectedText, actualText)
        }

        fun assertClearDisplay(expectedHint: String, testCaseDescription: String) {
            val messageClearError = "$testCaseDescription, displayEditText text was not cleared properly"
            val actualText = displayEditText.text.toString()
            val expectedText = ""
            assertEquals(messageClearError, expectedText, actualText)

            val messageHintAfterClearError = "$testCaseDescription, displayEditText hint was not set properly"
            val actualHint = displayEditText.hint.toString()
            assertEquals(messageHintAfterClearError, expectedHint, actualHint)
        }

        fun assertClearDisplay(expectedHint: Double, testCaseDescription: String) {
            val messageClearError = "$testCaseDescription, displayEditText text was not cleared properly"
            val actualText = displayEditText.text.toString()
            val expectedText = ""
            assertEquals(messageClearError, expectedText, actualText)

            val messageHintAfterClearError = "$testCaseDescription, displayEditText hint was not set properly"
            val actualHint = displayEditText.hint.toString().toDouble()
            assertEquals(messageHintAfterClearError, expectedHint, actualHint, 0.0)
        }

        fun assertResult(expectedResult: String, testCaseDescription: String) {
            val messageClearError = "$testCaseDescription, displayEditText text was not cleared properly"
            val actualText = displayEditText.text.toString()
            val expectedText = ""
            assertEquals(messageClearError, expectedText, actualText)

            val messageHintAfterClearError = "$testCaseDescription, displayEditText hint was not set properly"
            val actualHint = displayEditText.hint.toString()
            assertEquals(messageHintAfterClearError, expectedResult, actualHint)
        }

        fun assertResult(expectedResult: Double, testCaseDescription: String) {
            val messageClearError = "$testCaseDescription, displayEditText text was not cleared properly"
            val actualText = displayEditText.text.toString()
            val expectedText = ""
            assertEquals(messageClearError, expectedText, actualText)

            val messageHintResultError = "$testCaseDescription, displayEditText hint was not set properly"
            val actualResult = displayEditText.hint.toString().toDouble()
            assertEquals(messageHintResultError, expectedResult, actualResult, 0.0)
        }
    }
  learner_created: false
- name: src/test/java/org/hyperskill/calculator/Stage2UnitTest.kt
  visible: false
  text: |-
    package org.hyperskill.calculator

    import android.widget.Button
    import org.hyperskill.calculator.internals.BasicCalculatorUnitTest
    import org.junit.Assert.assertEquals
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runner.RunWith
    import org.junit.runners.MethodSorters
    import org.robolectric.RobolectricTestRunner

    // Version 2.0
    @RunWith(RobolectricTestRunner::class)
    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class Stage2UnitTest : BasicCalculatorUnitTest<MainActivity>(MainActivity::class.java) {

        @Test
        fun test00_checkButtonsWork() {
            testActivity {
                calculatorView.apply {

                    button1.clickAndRun()
                    button2.clickAndRun()
                    button3.clickAndRun()
                    button4.clickAndRun()
                    button5.clickAndRun()
                    button6.clickAndRun()
                    button7.clickAndRun()
                    button8.clickAndRun()
                    button9.clickAndRun()
                    button0.clickAndRun()

                    val messageDisplayNumbersError = "Clicked all the buttons, but something went wrong while displaying numbers"
                    val expectedNumberToDisplay = "1234567890"
                    val actualNumberDisplayed = displayEditText.text.toString()
                    assertEquals(messageDisplayNumbersError, expectedNumberToDisplay, actualNumberDisplayed)
                }
            }
        }

        @Test
        fun test01_checkClearButtonWorks() {
            testActivity {
                calculatorView.apply {

                    forEachNumberButton { button: Button, idString: String ->
                        button.clickAndRun()
                        clearButton.clickAndRun()
                        this.assertClearDisplay(
                            expectedHint = "0",
                            testCaseDescription = "Clicked the clearButton after clicking $idString"
                        )
                    }
                }
            }

        }

        @Test
        fun test02_checkZeroButtonLock() {
            testActivity {
                calculatorView.apply {

                    clearButton.clickAndRun()
                    button0.clickAndRun()
                    button0.clickAndRun()
                    button0.clickAndRun()
                    button0.clickAndRun()
                    button0.clickAndRun()

                    val actualText = displayEditText.text.toString()
                    val message = "Clicked the button0 multiple times, got more or less than one 0."
                    assertEquals(message, "0", actualText)
                }
            }
        }

        @Test
        fun test03_checkDotButtonLock() {
            testActivity {
                calculatorView.apply {
                    clearButton.clickAndRun()
                    button0.clickAndRun()
                    dotButton.clickAndRun()
                    dotButton.clickAndRun()
                    dotButton.clickAndRun()
                    val actualText = displayEditText.text.toString()
                    val message = "Clicked the dotButton multiple times, got more or less than one dot."
                    assertEquals(message, "0.", actualText)
                }
            }

        }

        @Test
        fun test04_checkDotButtonLockAfterNumber() {
            testActivity {
                calculatorView.apply {
                    clearButton.clickAndRun()
                    button0.clickAndRun()
                    dotButton.clickAndRun()
                    button8.clickAndRun()
                    dotButton.clickAndRun()
                    val actualText = displayEditText.text.toString()
                    val message = "Clicked the dotButton multiple times, got more or less than one dot."
                    assertEquals(message, "0.8", actualText)
                }
            }

        }

        @Test
        fun test05_checkNoZeroesToTheLeft() {
            testActivity {
                calculatorView.apply {

                    clearButton.clickAndRun()
                    button0.clickAndRun()
                    button1.clickAndRun()

                    val actualText = displayEditText.text.toString()
                    val message = "Clicked the zero and button1, got a wrong result."
                    assertEquals(message, "1", actualText)
                }
            }

        }

        @Test
        fun test06_checkNoDotsWithoutInteger() {
            testActivity {
                calculatorView.apply {
                    clearButton.clickAndRun()
                    dotButton.clickAndRun()
                    button1.clickAndRun()
                    val actualText = displayEditText.text.toString()
                    val message = "Clicked the dotButton and button1, got a wrong result."
                    assertEquals(message, "0.1", actualText)
                }
            }
        }
    }
  learner_created: false
- name: src/main/res/drawable/rectangle_button_background.xml
  visible: true
  text: |-
    <?xml version="1.0" encoding="utf-8"?>
    <shape xmlns:android="http://schemas.android.com/apk/res/android">
        <solid android:color="#B0B0B0"/> <!-- This is a default grey color -->
        <corners android:radius="4dp"/> <!-- This makes the button have slightly rounded corners, adjust as necessary -->
    </shape>
  learner_created: true
- name: src/main/res/drawable/divider.xml
  visible: true
  text: |-
    <?xml version="1.0" encoding="utf-8"?>
    <shape xmlns:android="http://schemas.android.com/apk/res/android">
        <solid android:color="#20000000" />
        <size android:height="1dp" />
    </shape>
  learner_created: true
- name: src/main/res/values/dimens.xml
  visible: true
  text: |-
    <?xml version="1.0" encoding="utf-8"?>
    <resources>
        <dimen name="text_size">20sp</dimen>
    </resources>
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13538#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 18 Oct 2023 20:16:53 UTC"
record: 2
